{"version":3,"sources":["TextCounter.js","App.js","reportWebVitals.js","index.js"],"names":["TextCounter","props","state","totalChars","text","handleChange","bind","e","target","value","length","this","limit","setState","onChange","Component","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAEMA,E,kDAKJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAY,EACZC,KAAM,IAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANH,E,gDASnB,SAAaC,GACT,IACEH,EADWG,EAAEC,OACDC,MAEZL,EAAKM,QAAUC,KAAKV,MAAMW,OAC5BD,KAAKE,SAAS,CACZV,WAAYC,EAAKM,OACjBN,W,oBAKN,WACE,IAAOF,EAAgBS,KAAhBT,MAAOD,EAASU,KAATV,MAEd,OACE,gCACE,8CACA,0BAAUa,SAAWH,KAAKN,aAAeI,MAAOP,EAAME,OACtD,gCACE,4CADF,IAC4BF,EAAMC,WADlC,MACmDF,EAAMW,gB,GAlCvCG,aAApBf,EACGgB,aAAe,CACpBJ,MAAO,IAuCIZ,QChCAiB,MATf,WACE,OACE,gCACE,cAAC,EAAD,CAAaL,MAAO,KACpB,cAAC,EAAD,QCMSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ec02eae5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TextCounter extends Component {\n  static defaultProps = {\n    limit: 15\n  }\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      totalChars: 0,\n      text: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  \n  handleChange(e) {\n      const elem = e.target,\n        text = elem.value;\n      \n    if (text.length <= this.props.limit) {\n      this.setState({\n        totalChars: text.length,\n        text\n      });\n    }\n  }\n  \n  render() {\n    const {state, props} = this;\n    \n    return (\n      <div>\n        <h1>Meu Contador</h1>\n        <textarea onChange={ this.handleChange } value={state.text} />\n        <div>\n          <strong>Total:</strong> { state.totalChars } / { props.limit }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TextCounter;","import TextCounter from './TextCounter';\n\nfunction App() {\n  return (\n    <div>\n      <TextCounter limit={20} />\n      <TextCounter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}